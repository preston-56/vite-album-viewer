name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - main  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Caching Python packages
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Setting up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  

      # Creating and activating virtual environment, installing dependencies
      - name: Set up and install dependencies
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt  
        working-directory: ./backend

      # Set up DATABASE_URL from secrets and verify
      - name: Verify DATABASE_URL
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          if [ -z "$DATABASE_URL" ]; then
            echo "DATABASE_URL is not set!"
            exit 1
          else
            echo "DATABASE_URL is set."
          fi

      # Run backend tests
      - name: Run tests with pytest
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          . venv/bin/activate
          pytest tests/ --doctest-modules -q --disable-warnings
        working-directory: ./backend  

      # Deploy to Production if tests pass
      - name: Deploy to Production
        if: ${{ success() }}
        run: |
          echo "Deploying to production..."

      # Notify on failure
      - name: Notify on Failure
        if: ${{ failure() }}
        run: |
          echo "Build failed! Sending notification..."
